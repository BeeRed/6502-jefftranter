

        .ORG  $6000     ; ORIGIN GOES HERE

;    *****************************************
;    *                                       *
;    *        -< THE EMPTY SHELL >-          *
;    *                                       *
;    *            (DUMMY PROGRAM)            *
;    *                                       *
;    *      VERSION 1.0 ($6000-$6160)        *
;    *                                       *
;    *                5-24-83                *
;    *.......................................*
;    *                                       *
;    *          COPYRIGHT C 1983 BY          *
;    *                                       *
;    *    DON LANCASTER AND SYNERGETICS      *
;    *    BOX 1300, THATCHER AZ., 85552      *
;    *                                       *
;    *    ALL COMMERCIAL RIGHTS RESERVED     *
;    *                                       *
;    *****************************************

;              *** WHAT IT DOES ***

;    THIS PROGRAM IS A DUMMY SHELL USED AS A STARTING
;    POINT FOR YOUR OWN ASSEMBLY LANGUAGE PROGRAMS.
;
;
;
;

;            *** HOW TO USE IT ***

;    TO USE, EDIT THE PROGRAM BY MOVING THE ORIGIN,
;    CHANGING THE TITLE, REMOVING EXTRA EQU'S, ADDING
;    YOUR OWN WORKING CODE, ALTERING THE DATA FILES
;    AND DOING WHATEVER ELSE MAY BE NEEDED TO BUILD
;    YOUR OWN CUSTOM ASSEMBLED PROGRAM OR MODULE.



;    *** GOTCHAS ***

;    ANYTHING ESSENTIAL FOR USE. OR UNDERSTANDING OF THE
;    PROGRAM GETS PUT HERE. THIS INCLUDES SPECIAL NEEDS
;    SUCH AS EXTRA MEMORY, ANY COMPANION CODE MODULES, OR
;    ANY SPECIAL HARDWARE.
;
;

;             *** ENHANCEMENTS ***

;    PUT ANY ADD-ONS, "EXTRA TRICKS", OR SPECIAL
;    USES HERE. INCLUDE USE TIPS AND APPLICATIONS.
;
;
;
;

;    *** RANDOM COMMENTS ***

;    IF THERE IS SOMETHING ELSE YOU WANT TO SAY THAT'S
;    NOT ALL THAT IMPORTANT, YOU CAN ADD IT IN THIS SPACE.
;
;
;
;


;           *** BOOKS ***

WNDLFT  =    $20       ; SCROLL WINDOW LEFT
WNDWDTH =    $21       ; SCROLL WINDOW WIDTH
WNDTOP  =    $22       ; SCROLL WINDOW TOP
WNDBOT  =    $23       ; SCROLL WINDOW BOTTOM
CH      =    $24       ; CURSOR HORIZONTAL
CV      =    $25       ; CURSOR VERTICAL
GBASL   =    $26       ; LORES BASE LOW
GBASH   =    $27       ; LORES BASE HIGH
BASL    =    $28       ; TEXT BASE LOW
BASH    =    $29       ; TEXT BASE HIGH
BEND    =    $2C       ; LORES RIGHT END H LINE
VBOT    =    $2D       ; LORES BOTTOM OF V LINE
COLOR   =    $30       ; LORES COLOR
INVFLG  =    $31       ; NORMAL/INVERSE/FLASH (FF,7F,3F)
PROMPT  =    $33       ; HOLDS PROMPT SYMBOL
CSWL    =    $36       ; OUTPUT CHARACTER HOOK LOW
CSWH    =    $37       ; OUTPUT CHARACTER HOOK HIGH
KSWL    =    $38       ; INPUT CHARACTER HOOK LOW
KSWH    =    $39       ; INPUT CHARACTER HOOK HIGH
RNDL    =    $4E       ; RANDOM NUMBER LOW
RNDH    =    $4F       ; RANDOM NUMBER HIGH

STACK   =    $0100     ; STACK PAGE A CCESS

KEYBUF  =    $0200     ; KEYBUFFER START

DOSWRM  =    $03D0     ; DOS WARM START JMP
DOSCLD  =    $03D3     ; DOS COLO START JMP
DOSFLM  =    $03D6     ; DOS FILE MANAGER JUMP
DOSRWTS =    $03D9     ; DOS RWTS JUMP
DOSIPRM =    $03DC     ; DOS FILE PARAMETER FIND JUMP
DOSRWLS =    $03E3     ; DOS RWTS PARAMETER FIND JUMP
DOSHOOK =    $03EA     ; DOS HOOK RECONNECT JUMP
ABRK    =    $03F0     ; ABREAK ADDRESS (AUTOSTART& 2E ONLY!)
SOFTEV  =    $03F2     ; SOFT RESET (AUTOSTART & 2E ONLY!)
PWRDUP  =    $03F4     ; WARM START EOR CHECKSUM
AMPERV  =    $03F5     ; APPLESOFT "&" JUMP
USRADR  =    $03F8     ; CTRL-Y JUMP
NMI     =    $03FB     ; NON-MASKABLE INTERRUPT JUMP
IRQLOC  =    $03FE     ; INTERRUPT ADDRESS LOW

TEXTP1  =    $0400     ; START OF TEXT PAGE ONE
TEXTP2  =    $0800     ; START OF TEXT PAGE TWO
HIRESP1 =    $2000     ; START OF HIRES PAGE ONE
HIRESP2 =    $4000     ; START OF HIRES PAGE TWO


IOADR   =    $C000     ; KEYBOARD INPUT
KBDSTR  =    $C010     ; KEYSTROBE RESET
TAPEOUT =    $C020     ; CASSETTE OR AUDIO OUT
SPKR    =    $C030     ; SPEAKER CLICK OUTPUT
STROBE  =    $C040     ; GAME CONNECTOR STROBE
TXTCLR  =    $C050     ; GRAPHICS ON SOFT SWITCH
TXTSET  =    $C051     ; TEXT ON SOFT SWITCH
MIXCLR  =    $C052     ; FULL SCREEN SOFT SWITCH
MIXSET  =    $C053     ; MIXED SCREEN SOFT SWITCH
LOWSCR  =    $C054     ; PAGE ONE SOFT SWITCH
HISCR   =    $C055     ; PAGE TWO SOFT SWITCH
LORES   =    $C056     ; LORES SOFT SWITCH
HIRES   =    $C057     ; HIRES SOFT SWITCH
PB4     =    $C060     ; CASS IN + "FOURTH" PB INPUT "SW3"
PB1     =    $C061     ; OPEN APPLE + "FIRST" PB INPUT "SW0"
PB2     =    $C062     ; CLOSED APPLE + "SECOND" PB INPUT "S
PB3     =    $C063     ; "THIRD" PUSHBUTTON INPUT "SW2"
PDL0    =    $C064     ; GAME PADDLE 0 ANALOG IN
PDL1    =    $C065     ; GAME PADDLE 1 ANALOG IN
PDL2    =    $C066     ; GAME PADDLE 2 ANALOG IN
PDL3    =    $C067     ; GAME PADDLE 3 ANALOG IN
PTRIG   =    $C070     ; ANALOG PADDLE RESET

STEP00  =    $C080     ; DISK STEPPER PHASE 0 OFF
STEP01  =    $C081     ; DISK STEPPER PHASE 0 ON
STEP10  =    $C082     ; DISK STEPPER PHASE 1 OFF
STEP11  =    $C083     ; DISK STEPPER PHASE 1 ON
STEP20  =    $C084     ; DISK STEPPER PHASE 2 OFF
STEP21  =    $C075     ; DISK STEPPER PHASE 2 ON
STEP30  =    $C086     ; DISK STEPPER PHASE 3 OFF
STEP31  =    $C087     ; DISK STEPPER PHASE 3 ON
MOTON   =    $C088     ; DISK MAIN MOTOR OFF
MOTOFF  =    $C089     ; DISK MAIN MOTOR ON
DRV0EN  =    $C08A     ; DISK ENABLE DRIVE 1
DRV1EN  =    $C08B     ; DISK ENABLE DRIVE 2
Q6CLR   =    $C08C     ; DISK Q6 CLEAR
Q6SET   =    $C08D     ; DISK Q6 SET
Q7CLR   =    $C08E     ; DISK Q7 CLEAR
Q7SET   =    $C08F     ; DISK Q7 SET

BASICLD =    $E000     ; ENTER BASIC COLD
BASICWM =    $E003     ; RE-ENTER BASIC WARM

HGR2    =    $F3D8     ; APPLESOFT CLEAR TO HIRES 2
HGR     =    $F3E2     ; APPLESOFT CLEAR TO HIRES 1
BKGND   =    $F3F4     ; APPLESOFT HIRES BACKGROUND CLEAR
HCOLOR  =    $F6F0     ; APPLESOFT HIRES COLOR SELECT
HPOSN   =    $F411     ; APPLESOFT HIRES POSITION
HPLOT   =    $F457     ; APPLESOFT HIRES PLOT


F800: 172 PLOT EQU $F800 PLOT LORES BLOCK
F819: 173 HLINE EQU $F819 BORIZ LORES LINE
F828: 174 VLINE EQU $F828 J VERTICAL LORES LINE
F832: 175 CLRSCR EQU $F832 CLEAR FULL LORES SCREEN
F836: 176 CLRTOP EQU $FB36 CLEAR TOP. LORES SCREEN
F847: 177 GBSCALC EQU $F847 LORES BASE CALCULATION
F85F: 178 NEXTCOL EQU $F85F INCREASE LORES COLOR BY 3
F864: 179 SETCOL EQU $F864 SET LORES COLOR
F871: 180 SCRN EQU $F871 READ LORES SCREEN COLOR
F941: 181 PRNTAX EQU $F941 OUTPUT A THEN X. AS HEX
F949: 182 PRBLNK EQU $F948 OUTPUT 3 SPACES VIA BOOKS
􀂍.94A: 183 PRBL2 EQU $F94A OUTPUT X BLANKS VIA HOOKS
FAD7: 185 REGDSP EQU $FAD7 DISPLAY WORKING REGISTERS
FB1E: 186 PREAD EQU $FB1E READ GAME PADDLE X
FB2F: 187 INIT EQU $FB2F INITIALIZE TEXT SCREEN
FB93: 188 SETTXT EQU $FB93 SET UP TEXT SCREEN (NOT 2E!)
FB40: 189 SETGR EQU $FB40 SET UP GRAPHICS SCREEN
FB4B: 190 SETWND EQU $FB4B SET NORMAL TEXT WINDOW
FBCl: 191 BASCALC EQU $FBC1 CALCULATE TEXT BASE ADDRESS (NOT 2E!}
FBD9: 19 2 BELL1 EQU $FBD9 BEEP SPEAKER IF CTRL-G
FBE4: 193 BELL2 EQU $FBE4 BEEP SPEAKER ONCE
FBF4: 194 ADVANCE EQU $FBF4 TEXT CURSOR ONE TO RIGHT
FBFD: 195 VIDOUT EQU $FBFD OUTPUT ASCII TO SCREEN ONLY
FC10: 197 BS EQU $FC10 BACKSPACE SCREEN
FC1A: 198 UP EQU $FC1A MOVE SCREEN CURSOR UP ONE LINE
FC22: 199 VTAB EQU $FC22 VERTICAL SCREEN TAB USING CV
FC24: 200 VTABA EQU $FC24 VERTICAL SCREEN TAB USING A
FC66: 201 ESC1 EQU $FC66 PROCESS ESCAPE CURSOR MOVES
FC42: 202 CLREOP EQU $FC42 CLEAR TO END OF PAGE
FC58: 203 HOME EQU $FCS8 CLEAR TEXT SCREEN AND HOME CURSOR
FC62: 204 CR EQU $FC62 CARRIAGE RETURN TO SCREEN
FC66: 205 LF EQU $FC66 LINEFE ED TO SCREEN ONLY
FC70: 206 SCROLL EQU $FC70 SCROLL TEXT SCREEN UP ONE
FC9C: 207 CLEOL EQU $FC9C CLEAR TEXT TO END OF LINE
FCA8: 208 WAIT EQU $FCA8 TIME DELAY SET BY ACCUMULATOR
FDOC: 209 RDKEY EQU $FDOC J GET INPUT CHARACTER VIA HOOKS
FD1B: 210 KEYIN EQU $FD1B READ THE APPLE KEYBOARD
FD35: 211 RDCHAR EQU $FD35 GET KEY AND PROCESS ESC A-F
FD62: 212 CANCEL EQU $FD62 J CANCEL KEYBOARD LINE ENTRY
FD67: 213 GETLNZ EQU $FD67 CR THEN GET KEYBOARD INPUT LINE
FD6A: 214 GETLN EQU $FD6A GET KEYBOARD INPUT LINE
FD6F: 215 GETLN1 EQU $FD6F GET KBD INPUT, NO PROMPT
FD8B: 216 CROUT! EQU $FD8B CLEAR EOL THEN CR VIA BOOKS
FD8E: 217 CROUT EQU $FD8E OUTPUT CR VIA HOOKS
FDDA: 218 PRBYTE EQU $FDDA OUTPUT FULL A IN HEX TO HOOKS
FDE3: 219 PRHEX EQU $FDE3 OUTPUT LOW A IN HEX TO HOOKS
FDED: 220 COOT EQU $FDED OUTPUT CHARACTER VIA HOOKS
FDFO: 221 COUTl EQU $FDFO J OUTPUT CHARACTER TO SCREEN
PROGRAM RM-0, CONT'D . . .
FE2C:
FE36:
FESE:
FE63:
FE80:
FE84:
FE93:
FEBO:
FEB3:
FEC2:
FEC4:
FECD:
FEFD:
FF2D:
FF3A:
FF3F:
FF4A:
FF58:
FF'S9:
FF65:
FF69:
FFA7:
224 MOVE EQU $FE2C
225 VERIFY EQU $FE36
226 LIST EQU $FESE
227 LIST2 EQU $FE63
228 SETINV EQU $FE80
229 SETNORM EQU $FE84
230 SETVID EQU $FE93
231 XBASIC EQU $FEBO
232 BASCON EQU $FEB3
233 TRACE EQU $FEC2
234 STEP EQU $FEC4
235 WRITE EQU $FECD
236 READ EQU $FEFO
237 PRERR EQU $FF2D
23S BELL EQU $FF3A
239 IORESR EQU $FF3F
240 IOSAVE EQU $FF4A
241 RETURN EQU $FFSS
242 OLDRST EQU $FF59
243 MON EQU $FF65
244 MONZ EQU $FF69
245 GETNUM EQU $FFA7
The Empty Shell 221
MOVE BLOCK OF MEMORY
VERIFY BLOCK OF MEMORY
DISASSEMBLE 20 INSTRUCTIONS
DISASSEMBLE •A• INSTRUCTIONS
PRINT INVERSE TEXT TO SCREEN
PRINT NORMAL TEXT TO SCREEN
GRAB OUTPUT HOOKS FOR SCREEN
GO BASIC, DESTROYING OLD
GO BASIC, CONTINUING OLD
START TRACING (OLD ROM ONLY!)
SINGLE STEP (OLD ROM ONLY!)
J WRITE TO CASSETTE TAPE
READ FROM CASSETTE TAPE
PRINT "ERR" TO OUTPUT HOOK
OUTPUT BELL TO HOOKS
RESTORE ALL WORKING REGISTERS
SAVE ALL WORKING REGISTERS
"GUARANTEED" RETURN
OLD RESET, NO AUTOSTART
ENTER MONITOR AND BEEP SPEAKER
ENTER MONITOR QUIETLY
ASCII TO HEX IN 3E & 3F
6000: 247 *** HOOKS FOR 2E ONLY! ***
COOO:
COOl:
C002:
C003:
C004:
COOS:
C006:
C007:
COOS:
C009:
COOA:
COOB:
COOC:
COOD:
COOE:
COOF:
249 CLRSOCO EQU
250 SETSOCO EQU
251 .RAMRDMN EQU
252 RAMRDAX EQU
2 53 RAMWRMN EQU
254 RAMWRAX EQU
255 SLOTXRM EQU
256 SLOTXEX EQU
$COOO
$COOl
$C002
$C003
$C:004
$COOS
$C006
$C007
25S MAINZP EQU $COOS
259 ALTZP EQU $C009
260 SLOT3RM EQU $COOA
261 SLOT3EX EQU $COOB
262 OFFSOCL EQU $COOC
263 ONSOCOL EQU $COOD \
264 ALTCSOF EQU $COOE
265 ALTCSON EQU $COOF
SO STORE OFF (WRITE ONLY)
SO STORE ON (WRITE ONLY)
READ MAIN MEMORY (WRITE ONLY)
READ AUXILIARY MEMORY (WRITE ONLY)
WRITE MAIN MEMORY (WRITE ONLY)
WRITE AUXILIARY MEMORY (WRITE ONLY)
INTERNAL ROM AT CXOO (WRITE ONLY)
SLOT ROM AT CXOO (WRITE ONLY)
USE MAIN ZERO PAGE (WRITE ONLY)
USE ALTERNATE ZERO PAGE (WRITE ONLY)
SLOT 13 INTERNAL ROM (WRITE ONLY)
SLOT 13 EXTERNAL ROM (WRITE ONLY)
TURN SO COLUMN OFF (WRITE ONLY)
TURN 80 COLUMN ON (WRITE ONLY)
USE MAIN CHARACTER SET (WRITE ONLY)
J USE ALT CHARACTER SET (WRITE ONLY)
222 Ripoff Module 0
PROGRAM RM-0, CONT'D • . .
C013: 268 RAMRDS EQU $C013 1 READ RAMREAD SWITCH (READ ONLY)
C014: 269 RAMW'l'S EQU $C014 , READ RAMWRITE SWITCH (READ ONLY)
COlS: 270 SLTCXS EQU $C015 , READ SLOT CX SWITCH (READ ONLY)
C016: 271 ALTZPS EQU $C016 , READ ZERO PAGE SWITCH (READ ONLY)
C017: 272 SLTC3S EQU $C017 READ SLOT C3 SWITCH (READ ONLY)
C018: 274 S80STR EQU $C018 READ 80STORE SWITCH (READ ONLY)
C019: 275 VBL EQU $C019 VERT. BLANKING >80=BLANK (READ ONLY)
COlA: 276 TEXTS EQU $COlA READ TEXT SWITCH (READ ONLY)
COlB: 277 MIXEDS EQU $C01B READ MIXED GR SWITCH (READ ONLY)
COlC: 278 PAGE2S EQU $C01C READ PAGE 2 SWITCH (READ ONLY)
COlD: 279 HIRESS EQU $COlD READ HIRES SWITCH (READ ONLY)
COlE: 280 ALTCSS EQU $COlE READ ALTCHAR SET SWITCH (READ ONLY)
COlF: 281 SSOCOL EQU $C01F READ SO COLUMN SWITCH (READ ONLY)
COSO: 283 RB2RAM EQU $COSO READ BANK 2 RAM
COSl: 2S4 WB2RAM EQU $C081 WRITE BANK 2 RAM, READ ROM
COS2: 2B5 RROM EQU $COB2 READ ROM ONLY, NO WRITE
COB3: 2B6 RWRAM2 EQU $COS3 READ & WRITE RAM2 (HIT TWICE!)
COSB: 2B7 RRAMl EQU $COBS READ BANKl RAM
COB9: 2BB WRAMl EQU $COB9 WRITE BANKl RAM, READ ROM
COSA: 2B9 RBlROM EQU $COSA READ BANKl ROM
COBB: 290 RWRAMl EQU $COBB READ & WRITE RAMl (HIT TWICE!)
6000: 292 *** CONSTANTS ***
6000: 293 *** TEXTFILE COMMANDS ***
OOSS: 295 B EQU $S8 BACKSPACE
OOBD: 296 c EQU $BD CARRIAGE RETURN
0084: 297 D EQU $S4 DOS ATTENTION
008C: 29B F EQU $BC FORM FEED
OOB7: 299 G EQU $87 RING GONG
OOBA: 300 L EQU $SA LINEFEED
0060: 301 p EQU $60 FLASHING PROMPT
0000: 302 X EQU $00 END OF MESSAGE
PROGRAM RM-0, CONT' D .
6000:
6000:
6000:
6000:
6000:
6000:
6000:
6000:
6000:
6000:EA
600l:EA
6002:EA
6003:EA
6004:EA
6005:EA
6006:EA
6007:EA
6008:EA
6009:EA
600A:EA
600B:EA
600C:EA
600D:EA
600E:EA
600F:EA
6010:EA
6011:EA
6012:EA
6013:EA
6014:EA
6015:EA
6016:EA
6017:EA
6018:EA
6019:EA
601A:EA
601B:EA
601C:EA
601D:EA
601E:EA
601F:EA
305 ;
306
307 ;
309
310
311 ;
312
313
314
316 START1
317
318
319
320
321
322
323
325
326
327
328
329
330
331
332
334
335
336
337
338
339
340
341
343
344
345
346
347
348
349
350
*** BIG LUMPS ***
*** MAIN PROGRAM ***
*** HIGH LEVEL CODE ***
A DD ANY COMMENTS HERE THAT ARE
SPECIFIC TO THE BIG LUMPS.
NOP YOUR HIGH LEVEL
NOP AN D GOES ON AS
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP 1·
NOP
NOP
The Empty Shell 223
CODE STARTS HERE
FAR AS NEEDED.
224 Ripoff Module 0
PROGRAM RM-0, CONT'D .
6020: 353 , *** LITTLE LUMPS ***
6020: 354 *** HEAVY SUBROUTINE ***
6020: 355 *** SUPPORTING MODULE ***
6020:· 357 ADD ANY COMMENTS HERE THAT ARE
6020: 358 SPECIFIC TO THE LITTLE LUMPS.
6020: 359
6020: 360
6020: 361
6020: 362
6020:EA 364 START2 NOP YOUR MEDIUM LEVEL CODE STARTS
6021:EA 365 NOP HERE AND GOES ON AS FAR AS
6022:EA 366 NOP NEEDED.
6023:EA 367 NOP
6024:EA 368 NOP
6025:EA 369 NOP
6026:EA 370 NOP
6027:EA 371 NOP
6028:EA 373 NOP
6029:EA 374 NOP
602A:EA 375 NOP
602B:EA 376 NOP
602C:EA 377 NOP
602D:EA 378 NOP
602E:EA 379 NOP
602F:EA 380 NOP
6030:EA 382 NOP
6031:EA 383 NOP
6032:EA 384 NOP
6033:EA 385 NOP
6034:EA 386 NOP
6035:EA 387 NOP
6036:EA 388 NOP
6037:EA 389 NOP
6038:EA 391 NOP
6039:EA 392 NOP
603A:EA 393 NOP
603B:EA 394 NOP
603C:EA 395 NOP
603D:EA 396 NOP
603E:EA 397 NOP
603F:EA 398 NOP
The Empty Shell 225
PROGRAM RM-0, CONT'D.
6040: 401 *** STASH ***
6040: 402 **􀀂 THE CRUMBS ***
6040: 403 *** D ETAIL SUBS ***
6040: 405 ADD ANY COMMENTS HERE THAT
6040: 406 ARE SPECIFIC TO THE CRUMBS.
6040: 407
6040: 408
6040: 409
6040: 410
6040:EA 412 START3 NOP YOUR LOW LEVEL CODE STARTS HERE AND
6041:EA 413 NOP INCLUDES ANY SHORT FILES THAT ARE
6042:EA 414 NOP RARELY CHANGE D.
6043:EA 415 NOP
6044:EA 416 NOP
6045:EA 417 NOP
6046:EA 418 NOP
6047:EA 419 NOP
6048:EA 421 NOP
6049:EA 422 NOP
604A:EA 423 NOP
604B:EA 424 NOP
604C:EA 425 NOP
604D:EA 426 NOP
604E:EA 427 NOP
604F:EA 428 NOP
6050:EA 430 NOP
6051:EA 431 NOP
6052:EA 432 NOP
6053:EA 433 NOP
6054:EA 434 NOP
6055:EA 435 NOP
6056:EA 436 NOP
6057:EA 437 NOP
6058:EA 439 NOP
6059:EA 440 NOP
605A:EA 441 NOP
605B:EA 442 NOP
605C:EA 443 NOP
605D:EA 444 NOP
605E:EA 445 NOP
605F:EA 446 NOP
226 Ripoff Module 0
PROGRAM RM-0, CONT' D •
6060: 449 *** MAIN FILES ***
6060: 451 7 ADD ANY COMMENTS HERE THAT ARE
6060: 452 SPECIFIC TO THE MAIN FILES.
6060: 453 7
6060: 454
6060: 455
6060: 456
6060:00 00 00 458 FILE1 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6063:00 00 00
6066:00 00
6068:00 00 00 459 FILE2 DFB $00,$00,$00,$00,$00,$00,$00,$00
6068:00 00 00
606E:OO 00
6070:00 00 00 460 FILE3 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6073:00 00 00
6076:00 00
6078:00 00 00 461 FILE4 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6078:00 00 00
607E:OO 00
6080:00 00 00 462 FILES DF8 $00,$00,$00,$00,$00,$00,$00,$00
6083:0() 00 00
6086:00 00
6088:00 00 00 463 FILE6 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6088:00 00 00
608E:OO 00
6090:00 00 00 464 FILE7 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6093:00 00 00
6096:00 00
6098:00 00 00 465 FILES DF8 $00,$00,$00,$00,$00,$00,$00,$00
6098:00 00 00
609E:OO 00
60AO:OO 00 00 466 FILE9 DF8 $00,$00,$00,$00,$00,$00,$00,$00
60A3:00 00 00
60A6:00 00
60A8:00 00 00 467 FILElO DF8 $00,$00,$00,$00,$00,$00,$00,$00
60A8:00 00 00
60AE:OO 00
6080:00 00 00 468 FILE11 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6083:00 00 00
6086:00 00
6088:00 00 00 469 FILE12 DF8 $00,$00,$00,$00,$00,$00,$00􀀪$00
6088:00 00 00
608E:OO 00
60CO:OO 00 00 470 FILE13 DFB $00,$00,$00,$00,$00,$00,$00,$00
60C3:00 00 00
60C6:00 00
60C8:00 00 00 471 FILE14 DFB $00,$00,$00,$00,$00,$00,$00,$00
60C8:00 00 00
60CE:OO 00
The Empty Shell 227
PROGRAM RM·O, CONT' D • . .
6000:00 00 00 474 FILE15 DFB $00,$00,$00,$00,$00,$00,$00,$00
6003:00 00 00
6006:00 00
6008:00 00 00 4.75 FILE16 DFB $00,$00,$00,$00,$00,$00,$00,$00
6008:00 00 00
600E:OO 00
60EO:OO 00 00 476 FILE17 OFB $00,$00,$00,$00,$00,$00,$00,$00
60E3:00 00 00
60E6:00 00
60E8:00 00 00 477 FILE18 OFB $00,$00,$00,$00,$00,$00,$00,$00
60E8:00 00 00
60EE:OO 00
60FO:OO 00 00 478 FILE19 OF8 $00,$00,$00,$00,$00,$00,$00,$00
60F3:00 00 00
60F6:00 00
60F8:00 00 00 479 FILE20 OF8' $00,$00,$00,$00,$00,$00,$00,$00
60F8:00 00 00
60FE:OO 00
6100:00 00 00 480 FILE21 OF8 $00,$00,$00,$00,$00,$00,$00,$00
6103:00 00 00
6106:00 00
6108:00 00 00 481 FILE22 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6108:00 00 00
610E:OO 00
6110:00 00 00 482 FILE23 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6113:00 00 00
6116:00 00
6118:00 00 00 483 FILE24 DF8 $00,$00,$00,$00,$00,$00,$00,$00
611B:OO 00 00
611E:OO 00
6120:00 00 00 484 FILE25 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6123:00 00 00
6126:00 00
6128:00 00 00 485 FILE26 DFB $00,$00,$00,$00,$00,$00,$00,$00
6128:00 00 00
612E:OO 00
6130:00 00 00 486 FILE27 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6133:00 00 00
6i36:00 00
6138:00 00 00 487 FILE28 OF8 $00,$00,$00,$00,$00,$00,$00,$00
6138:00 00 00
613E:OO 00
6140:00 00 00 488 FILE29 DFB $00,$00,$00,$00,$00,$00,$00,$00
6143:00 00 00
6146:00 00
6148:00 00 00 489 FILE30 OFB $00,$00,$00,$00,$00,$00,$00,$00
614B:OO 00 00
614E:OO 00
6150:00 00 00 490 FILE31 DFB $00,$00,$00,$00,$00,$00,$00,$00
6153:00 00 00
6156:00 00
6158:00 00 00 491 FILE.12 DF8 $00,$00,$00,$00,$00,$00,$00,$00
6158:00 00 00
615E:OO 00
228 Ripoff Module 0
PROGRAM RM·O,' CONT' D •
6160:
6160:
6160:
494 ,
496
497
*** BOTTOM LINE COMMENTS ***
ADD ANY PINAL COMMENTS YOU PEEL
ARE NEEDED IN THIS SPACE.
*** SUCCESSFUL ASSEMBLY: NO ERRORS
I FILE BASED PRINTER
the "standard" way to output
short and fixed text messages
by using a common message
file.
I
Outputting text is probably the most fundamental and most important
task we would ever ask of a machine language Apple program.
You might want to use the text to create a printed record, to inform
the user via the video screen, or to pass a command to the disk
system.
It turns out that there is no ''best'' way to go about outputting text
from machine language. Instead, there are many different methods
you can pick. These methods are based on how many messages you
must output, on how long each message is, and on how changeable
the messages have to be.
Further, you have to decide just where your message is going to go
as well. Usually, to output a character, you get it from somewhere and
put it in the accumulator. Then you go to a text outputting subroutine
that puts the character where you want it to appear. You continue this
until some change occurs, such as a marker or length count. Then you
go on to the next task at hand.
229
