ca65 V2.14 - Git cbb6f82
Main file   : musicbox.s
Current file: musicbox.s

000000r 1               ; ***** Fixed locations for MUSIC BOX *****
000000r 1               
000000r 1                       WORK    = $E0
000000r 1                       LIMIT   = $E6
000000r 1                       VAL2    = $E9
000000r 1                       VAL1    = $EA
000000r 1                       TIMER   = $EB
000000r 1                       XSAV    = $EC
000000r 1                       SBD     = $1742
000000r 1                       PBDD    = $1743
000000r 1               
000000r 1               ; PROGRAM - MUSIC BOX
000000r 1               
000000r 1                       .ORG    $0200
000200  1               
000200  1               ; THE LOWEST NOTE YOU CAN PLAY IS A BELOW MIDDLE C.  FOR EACH NOTE,
000200  1               ; YOU CAN SELECT WHETER IT IS PLAYED AS A LONG NOTE OR A SHORT NOTE
000200  1               ; (NORMALY, A LONG NOTE WILL LAST TWICE AS LONG AS A SHORT NOTE).
000200  1               ;
000200  1               ; SOME OF THE NOTES ARE AS FOLLOWS:
000200  1               ;
000200  1               ;        NOTE              SHORT LONG
000200  1               ;
000200  1               ;         A..................75   75
000200  1               ;         A#                 6E   EE
000200  1               ;         B..................68   E8
000200  1               ; MIDDLE  C                  62   E2
000200  1               ;         C#.................5C   DC
000200  1               ;         D                  56   D6
000200  1               ;         D#.................52   D2
000200  1               ;         E                  4D   CD
000200  1               ;         F..................48   C8
000200  1               ;         F#                 44   C4
000200  1               ;         G..................40   C0
000200  1               ;         G#                 3C   BC
000200  1               ;         A..................39   B9
000200  1               ;         A#                 35   B5
000200  1               ;         B..................32   B2
000200  1               ;   HIGH  C                  2F   AF
000200  1               ;         C#.................2C   AC
000200  1               ;         D                  29   A9
000200  1               ;         E..................24   A4
000200  1               ;         F                  22   A2
000200  1               ;         G..................1E   9E
000200  1               ;      PAUSE                 00   80
000200  1               
000200  1               
000200  1               ; INITIALIZE - RESET WORK PARAMETERS
000200  1               
000200  1  A2 05        START:  LDX     #5
000202  1  BD 86 02     LP1:    LDA     INIT,X
000205  1  95 E0                STA     WORK,X
000207  1  CA                   DEX
000208  1  10 F8                BPL     LP1
00020A  1               
00020A  1               ; MAIN ROUTINE HERE - WORK NOT RESET
00020A  1               
00020A  1  A9 BF        GO:     LDA    #$BF
00020C  1  8D 43 17             STA    PBDD             ; open output channel
00020F  1  A0 00                LDY    #0
000211  1  B1 E4                LDA    (WORK+4),Y       ; get next note
000213  1  E6 E4                INC    WORK+4
000215  1  C9 FA                CMP    #$FA             ; test for halt
000217  1  D0 04                BNE    NEXT
000219  1  00                   BRK                     ; (or RTS if used as subroutine)
00021A  1  EA                   NOP
00021B  1  F0 ED                BEQ    GO               ; resume when GO pressed
00021D  1  90 0B        NEXT:   BCC    NOTE             ; is it a note?
00021F  1  E9 FB                SBC    #$FB             ; if not, decode instrument
000221  1  AA                   TAX                     ; and put it into x
000222  1  B1 E4                LDA    (WORK+4),Y       ; GET PARAMETER
000224  1  E6 E4                INC    WORK+4
000226  1  95 E0                STA    WORK,X           ; STORE IN WORK TABLE
000228  1  B0 E0                BCS    GO               ; UNCONDITIONAL BRANCH
00022A  1               
00022A  1               ; SET UP FOR TIMING NOTE
00022A  1               
00022A  1  A6 E0        NOTE:   LDX    WORK             ; TIMING
00022C  1  86 E7                STX    LIMIT+1
00022E  1  A6 E1                LDX    WORK+1           ; LONG NOTE FACTOR
000230  1  A8                   TAY                     ; TEST ACCUM.
000231  1  30 02                BMI    OVER             ; LONG NOTE?
000233  1  A2 01                LDX    #1               ; NOPE, SET SHORT NOTE
000235  1  86 E6        OVER:   STX    LIMIT            ; store length factor
000237  1  29 7F                AND    #$7F             ; remove short/long flag
000239  1  85 E9                STA    VAL2
00023B  1  F0 02                BEQ    HUSH             ; is it a pause
00023D  1  85 EA                STA    VAL1             ; no, set pitch
00023F  1  A5 E9        HUSH:   LDA    VAL2             ; get timing and
000241  1  25 E3                AND    WORK+3           ; bypass if muted
000243  1  F0 04                BEQ    ON
000245  1  E6 EA                INC    VAL1             ; else fade the
000247  1  C6 E9                DEC    VAL2             ; note
000249  1  A6 E9        ON:     LDX    VAL2
00024B  1  A9 A7                LDA    #$A7
00024D  1  20 5D 02             JSR    SOUND
000250  1  30 B8                BMI    GO
000252  1  A6 EA                LDX    VAL1
000254  1  A9 27                LDA    #$27
000256  1  20 5D 02             JSR    SOUND
000259  1  30 AF                BMI    GO
00025B  1  10 E2                BPL    HUSH
00025D  1               
00025D  1               ; SUBROUTINE TO SEND A BIT
00025D  1               
00025D  1  A4 E2        SOUND:  LDY    WORK+2           ; octave flag
00025F  1  84 EB                STY    TIMER
000261  1  86 EC                STX    XSAV
000263  1  E0 00        SLOOP:  CPX    #0
000265  1  D0 08                BNE    CONT
000267  1  A6 EC                LDX    XSAV
000269  1  C6 EB                DEC    TIMER
00026B  1  D0 F6                BNE    SLOOP
00026D  1  F0 16                BEQ    SEX
00026F  1  8D 42 17     CONT:   STA    SBD
000272  1  CA                   DEX
000273  1  C6 E8                DEC    LIMIT+2
000275  1  D0 EC                BNE    SLOOP
000277  1  C6 E7                DEC    LIMIT+1
000279  1  D0 E8                BNE    SLOOP
00027B  1  A4 E0                LDY    WORK
00027D  1  84 E7                STY    LIMIT+1
00027F  1  C6 E6                DEC    LIMIT
000281  1  D0 E0                BNE    SLOOP
000283  1  A9 FF                LDA    #$FF
000285  1  60           SEX:    RTS
000286  1               
000286  1               
000286  1               ; INITIAL CONSTANTS
000286  1               
000286  1  30 02 01     INIT:  .BYTE    $30, 2, 1
000289  1  FF 00 00            .BYTE    $FF, 0, 0
00028C  1               
00028C  1               ; SAMPLE MUSIC FOR MUSIC BOX PROGRAM
00028C  1               
00028C  1                      .ORG    $0000
000000  1               
000000  1  FB 18 FE FF        .BYTE    $FB,$18,$FE,$FF,$44,$51,$E6,$E6,$66,$5A,$51,$4C,$C4,$C4,$C4,$D1
000004  1  44 51 E6 E6  
000008  1  66 5A 51 4C  
000010  1  BD BD BD 00        .BYTE    $BD,$BD,$BD,$00,$44,$BD,$00,$44,$3D,$36,$33,$2D,$A8,$80,$80,$33
000014  1  44 BD 00 44  
000018  1  3D 36 33 2D  
000020  1  44 B3 80 80        .BYTE    $44,$B3,$80,$80,$44,$51,$C4,$80,$80,$5A,$51,$E6,$80,$80,$FA
000024  1  44 51 C4 80  
000028  1  80 5A 51 E6  
00002F  1               
00002F  1  FE                 .BYTE    $FE
000030  1  00 FB 28 5A        .BYTE    $00,$FB,$28,$5A,$5A,$51,$48,$5A,$48,$D1,$5A,$5A,$51,$48,$DA,$E0
000034  1  5A 51 48 5A  
000038  1  48 D1 5A 5A  
000040  1  5A 5A 51 48        .BYTE    $5A,$5A,$51,$48,$44,$48,$51,$5A,$60,$79,$6C,$60,$DA,$DA,$FA
000044  1  44 48 51 5A  
000048  1  60 79 6C 60  
00004F  1               
00004F  1  FE                 .BYTE    $FE
000050  1  FF 5A 5A 5A        .BYTE    $FF,$5A,$5A,$5A,$5A,$5A,$5A,$66,$72,$79,$E6,$E6,$80,$00,$56,$56
000054  1  5A 5A 5A 66  
000058  1  72 79 E6 E6  
000060  1  56 56 56 56        .BYTE    $56,$56,$56,$56,$5A,$66,$F2,$80,$80,$4C,$4B,$4C,$4C,$4C,$4C,$56
000064  1  5A 66 F2 80  
000068  1  80 4C 4B 4C  
000070  1  5A 56 4C 00        .BYTE    $5A,$56,$4C,$00,$C4,$44,$4C,$56,$5A,$5A,$56,$5A,$66,$56,$6A,$66
000074  1  C4 44 4C 56  
000078  1  5A 5A 56 5A  
000080  1  F2 80 FE 00        .BYTE    $F2,$80,$FE,$00,$00,$72,$5A,$CC,$72,$5A,$CC,$72,$5A,$CC,$80,$B8
000084  1  00 72 5A CC  
000088  1  72 5A CC 72  
000090  1  80 4C 56 5A        .BYTE    $80,$4C,$56,$5A,$56,$5A,$E6,$F2,$80,$FA,$FF,$00
000094  1  56 5A E6 F2  
000098  1  80 FA FF 00  
00009C  1               
00009C  1               ; NOTE THAT TUNES 1 AND 2 SET BOTH THE SPEED AND THE INSTRUMENT.
00009C  1               ; TUNE 3 CONTINUES AT THE SAME SPEED AS THE PREVIOUS ONE; BUT THE
00009C  1               ; INSTRUMENT IS CHANGED DURING THE TUNE.
00009C  1               
00009C  1               ; THE PROGRAM CAN BE CHANGED TO USE THE SPEAKER SHOWN IN
00009C  1               ; FIGURE 5.1 OF THE KIM MANUAL AS FOLLOWS:
00009C  1               ;
00009C  1               ;    BYTE           INITIALLY       CHANGE TO
00009C  1               ;    020D              43                01
00009C  1               ;    024C              A7                FF
00009C  1               ;    0255              27                00
00009C  1               ;    0270              42                00
00009C  1               
00009C  1               ; ***** Extra Datafile for Music Box *****
00009C  1               
00009C  1                      .ORG    $0000
000000  1               
000000  1  FE 00 56 52         .BYTE   $FE,$00,$56,$52,$AD,$AF,$AD,$AF,$AD,$FC,$06,$AF,$FC,$02,$FE,$FF
000004  1  AD AF AD AF  
000008  1  AD FC 06 AF  
000010  1  2F 29 26 24         .BYTE   $2F,$29,$26,$24,$2F,$29,$AA,$32,$A9,$FC,$06,$AF,$FC,$02,$FE,$00
000014  1  2F 29 AA 32  
000018  1  A9 FC 06 AF  
000020  1  56 52 AD AF         .BYTE   $56,$52,$AD,$AF,$5D,$AF,$AD,$FC,$06,$AF,$FC,$02,$FE,$FF,$39,$40
000024  1  5D AF AD FC  
000028  1  06 AF FC 02  
000030  1  44 39 2F AF         .BYTE   $44,$39,$2F,$AF,$29,$2F,$39,$A9,$B0,$80,$FE,$00,$56,$52,$AD,$AF
000034  1  29 2F 39 A9  
000038  1  B0 80 FE 00  
000040  1  AD AF 0D FC         .BYTE   $AD,$AF,$0D,$FC,$06,$AF,$FC,$02,$FE,$FF,$2F,$29,$26,$24,$2F,$29
000044  1  06 AF FC 02  
000048  1  FE FF 2F 29  
000050  1  AA 32 A9 AF         .BYTE   $AA,$32,$A9,$AF,$B0,$80,$2F,$29,$24,$2F,$29,$A4,$2F,$29,$2F,$24
000054  1  B0 80 2F 29  
000058  1  24 2F 29 A4  
000060  1  2F 29 AA 2F         .BYTE   $2F,$29,$AA,$2F,$29,$2F,$2A,$2F,$29,$A4,$32,$A9,$AF,$80,$80,$FA
000064  1  29 2F 2A 2F  
000068  1  29 A4 32 A9  
000070  1  FF 00               .BYTE   $FF,$00
000072  1               
000072  1               ; Note: be sure to set the break vector 17FE,FF (00,1C)
000072  1               
